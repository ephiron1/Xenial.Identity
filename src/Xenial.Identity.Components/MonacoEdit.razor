@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div style="@($"min-height: {Height}; min-width: {Width};")">
    <div @ref="el" style="@($"height: {Height}; width: {Width};")"></div>
</div>

@code {
    private ElementReference el;
    private IJSObjectReference? module;
    private DotNetObjectReference<MonacoEdit>? component;

    [Parameter]
    public string Value { get; set; } = "";

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public CodeLanguage Language { get; set; }

    [Parameter]
    public string Height { get; set; } = "500px";

    [Parameter]
    public string Width { get; set; } = "100%";

    public const string Script = "./_content/Xenial.Identity.Components/js/MonacoEdit/MonacoEdit.js";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", Script);
            component?.Dispose();
            component = DotNetObjectReference.Create(this);
            var lang = Language switch
            {
                CodeLanguage.Css => "css",
                CodeLanguage.Html => "html",
                CodeLanguage.Json => "json",
                _ => ""
            };
            await module.InvokeVoidAsync("CreateMonacoEditor", component, el, Value, lang);
        }
    }

    [JSInvokable]
    public async Task UpdateValue(string value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (module is { })
            {
                await module.InvokeVoidAsync("DisposeMonacoEditor", el);
                await module.DisposeAsync();
            }
        }
        catch (JSDisconnectedException) { }
        component?.Dispose();
    }
}
