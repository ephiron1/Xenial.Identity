@page "/Admin2/Client/{ClientId:int}"
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using MudBlazor.Utilities
@using Newtonsoft.Json
@using Xenial.Identity.Data
@using Xenial.Identity.Infrastructure
@using Xenial.Identity.Xpo.Storage.Models
@inject UnitOfWork UnitOfWork
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudStack Row Spacing="2">
    <MudFab Icon="@Icons.Filled.ArrowBack" Size="@Size.Large" Color="Color.Surface" Href="/Admin2/Clients" />
    <MudText Typo="Typo.h3" GutterBottom>Client</MudText>
</MudStack>

@if (Client is not null)
{
    <div class="small-tabs">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudStack>
                <MudPaper Class="pa-4">
                    <MudStack Row="true">
                        <MudAvatar Color="Color.Secondary" Variant="Variant.Outlined" Size="Size.Large">
                            <MudIcon Icon="@Icons.Filled.Cable" />
                        </MudAvatar>
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudText Typo="Typo.body1">@Client.ClientId</MudText>
                            <MudText Typo="Typo.body2">@Client.ClientName</MudText>
                            <MudText Typo="Typo.body2">@Client.Description</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>

                <MudTabs ApplyEffectsToContainer="true"
                     Centered
                     Elevation="4"
                     Rounded="true"
                     PanelClass="@((ActivePanelIndex == 0 || ActivePanelIndex == 1) ? "pa-6" : "")"
                     ActivePanelIndex="@ActivePanelIndex"
                     ActivePanelIndexChanged="@(i => SetActivePanelIndex(i))">
                    <MudTabPanel ToolTip="Name" Icon="@Icons.Filled.Person">
                        <MudStack Spacing="4">
                            <MudTextField Label="Id"
                                      Variant="Variant.Filled"
                                      FullWidth
                                      Margin="Margin.Dense"
                                      @bind-Value="@Client.ClientId" />
                            <MudTextField Label="Name"
                                      Variant="Variant.Filled"
                                      FullWidth
                                      Margin="Margin.Dense"
                                      @bind-Value="@Client.ClientName" />
                            <MudTextField Label="Description"
                                      Variant="Variant.Filled"
                                      FullWidth
                                      Margin="Margin.Dense"
                                      @bind-Value="@Client.Description" />
                            <MudStack Row Class="justify-space-between">
                                <MudSwitch @bind-Checked="@Client.Enabled" Label="Enabled" Color="Color.Secondary" />
                                <MudSwitch @bind-Checked="@Client.EnableLocalLogin" Label="Enable Local Login" Color="Color.Secondary" />
                            </MudStack>
                            @*<MudStack Row Class="justify-space-between">
                        <MudSwitch @bind-Checked="@Client.ShowInDiscoveryDocument" Label="Show in Discovery Document" Color="Color.Secondary" />
                        <MudSwitch @bind-Checked="@Client.NonEditable" Label="Non Editable" Color="Color.Secondary" />
                        </MudStack>
                        <MudStack Row Class="justify-space-between">
                        <MudSwitch @bind-Checked="@Emphasize" Label="Emphasize" Color="Color.Secondary" />
                        </MudStack>*@
                        </MudStack>
                    </MudTabPanel>
                    <MudTabPanel ToolTip="Resources" Icon="@Icons.Filled.Interests">
                        <MudText Typo="Typo.caption">Identity-Resources</MudText>
                        <TagStringEdit @bind-Tags="@IdentityResources" SearchFunc="@SearchUserResources" />

                        <MudPaper Class="mx-0 mt-6" Elevation="0">
                            <MudToolBar Row Class="ma-0">
                                <MudText Typo="Typo.body1">Resources</MudText>
                                <MudSpacer />
                                <MudTooltip Text="Add">
                                    <MudIconButton Icon="@Icons.Filled.Add"
                                               Color="Color.Success"
                                               OnClick="@AddScope" />
                                </MudTooltip>
                            </MudToolBar>
                            @* <MudList Clickable="false">
                        <MudListItem Text="@Client.Name" InitiallyExpanded="true" ExpandLessIcon="" ExpandMoreIcon="" OnClickHandlerPreventDefault>
                        <NestedList>
                        @foreach (var scope in Scopes)
                        {
                        <MudListItem>
                        <MudStack Row AlignItems="AlignItems.Center" Class="mr-6">
                        <MudLink Class="cursor-pointer" onclick="@(async () => await EditScope(scope))">
                        @scope.Scope
                        </MudLink>
                        <MudSpacer />
                        <MudTooltip Text="Delete">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                        Variant="Variant.Filled"
                        Color="Color.Error"
                        Size="Size.Small"
                        OnClick="async () => await DeleteScope(scope)" />
                        </MudTooltip>
                        <MudTooltip Text="Edit">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Size="Size.Small"
                        OnClick="async () => await EditScope(scope)" />
                        </MudTooltip>
                        </MudStack>
                        </MudListItem>
                        }
                        </NestedList>
                        </MudListItem>
                        </MudList>*@
                        </MudPaper>
                    </MudTabPanel>
                    @*                    <MudTabPanel ToolTip="Secrets" Icon="@Icons.Filled.Key">
                <CascadingValue Value="this" IsFixed>
                <ApiSecrets Resource="@Client" />
                </CascadingValue>
                </MudTabPanel>
                <MudTabPanel ToolTip="Properties" Icon="@Icons.Filled.Class">
                <ApiPropertiesSmall Resource="@Client" AllowEdit Height="500px" />
                </MudTabPanel>*@
                </MudTabs>

                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => await Save()">Save</MudButton>

            </MudStack>
        </MudContainer>
    </div>

}
@code {
    [Parameter]
    public int ClientId { get; set; }

    public bool Emphasize { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(ActivePanelIndex))]
    public int ActivePanelIndex { get; set; } = 0;

    private void SetActivePanelIndex(int activePanelIndex)
    {
        ActivePanelIndex = activePanelIndex;
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameter(nameof(ActivePanelIndex), activePanelIndex)
        );
    }

    public XpoClient Client { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await Reload();
    }

    protected async Task Reload()
    {
        Client = await UnitOfWork.GetObjectByKeyAsync<XpoClient>(ClientId);
        //Client.UserClaims.Reload();
        //Client.Scopes.Reload();
        //var existingScope = UnitOfWork.Query<XpoApiScope>().Where(s => s.Name == Client.Name).FirstOrDefault();
        //if (existingScope is not null)
        //{
        //    Emphasize = existingScope.Emphasize;
        //}
        //IdentityResources = Client.UserClaims.Select(m => m.Type).ToList();
        //Scopes = Client.Scopes.Where(s => s.Scope != Client.Name).ToList();
    }
}
