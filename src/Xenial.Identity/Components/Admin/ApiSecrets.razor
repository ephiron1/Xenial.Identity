@using DevExpress.Data.Filtering
@using Microsoft.AspNetCore.Identity
@using MudBlazor.Utilities
@using Xenial.Identity.Areas.Identity.Pages.Account.Manage
@using Xenial.Identity.Data
@using Xenial.Identity.Xpo.Storage.Models
@inject UnitOfWork UnitOfWork
@inject IJsApiService JsApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudToolBar Dense>
    <MudSpacer />
    <MudTooltip Text="Add">
        <MudIconButton Icon="@Icons.Filled.Add"
                       Href="/Admin2/AddApi"
                       Color="Color.Success" />
    </MudTooltip>
    <MudTooltip Text="Refresh">
        <MudIconButton Icon="@Icons.Filled.Refresh"
                       OnClick="@Reload"
                       Color="Color.Primary" />
    </MudTooltip>
</MudToolBar>
<MudTable T="XpoApiResourceSecret"
          Dense
          FixedHeader
          Elevation="10"
          Items="@Items"
          Height="400px"
          Class="ma-0">
    <HeaderContent>
        <MudTh Style="width:0.1%; white-space: nowrap;">
            <MudTableSortLabel T="XpoApiResourceSecret"
                               SortLabel="@(nameof(XpoApiResourceSecret.Id))">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="XpoApiResourceSecret"
                               SortLabel="@(nameof(XpoApiResourceSecret.Value))">Secret</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="XpoApiResource"
                               SortLabel="@(nameof(XpoApiResourceSecret.Expiration))">Expiration</MudTableSortLabel>
        </MudTh>
        <MudTh Style="width:0.1%; white-space: nowrap;">

        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@(nameof(XpoApiResourceSecret.Id))">
            <MudTooltip Text="@context.Id.ToString()">
                <MudIconButton Size="Size.Small"
                               DisableElevation
                               Color="Color.Transparent"
                               Variant="Variant.Filled"
                               Icon="@Icons.Filled.Fingerprint"
                               Style="background-color: transparent"
                               OnClick="async () => await CopyToClipboard(context.Id.ToString())" />
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="@(nameof(XpoApiResourceSecret.Value))">
            <MudIconButton Size="Size.Small"
                           DisableElevation
                           Color="Color.Transparent"
                           Variant="Variant.Filled"
                           Icon="@Icons.Filled.Fingerprint"
                           Style="background-color: transparent"
                           OnClick="async () => await CopyToClipboard(context.Value.ToString(), isSecret: true)" />
        </MudTd>
        <MudTd DataLabel="@(nameof(context.Expiration))">
            @if (@context.Expiration.HasValue)
            {
                @context.Expiration.Value.ToString("g")
            }
        </MudTd>
        <MudTd>
            <MudStack Row>
                <MudTooltip Text="Delete">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Variant="Variant.Filled"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="async () => await Delete(context)" />
                </MudTooltip>
            </MudStack>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <ul>
            <li>There are no Secrets's yet.</li>
            <li>Do you want to <MudLink Class="cursor-pointer" Href="/Admin2/AddApi">Add a Secret</MudLink></li>
        </ul>
    </NoRecordsContent>
</MudTable>

@code {
    [Parameter]
    public XpoApiResource Resource { get; set; }

    private IEnumerable<XpoApiResourceSecret> Items = Enumerable.Empty<XpoApiResourceSecret>();

    protected override async Task OnParametersSetAsync()
    {
        await Reload();
        await base.OnParametersSetAsync();
    }

    private async Task CopyToClipboard(string content, bool isSecret = false)
    {
        await JsApiService.CopyToClipboardAsync(content);
        if (isSecret)
        {
            Snackbar.Add($"Copied secret to clipboard!", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Copied {content} to clipboard!", Severity.Info);
        }
    }

    private async Task Reload()
    {
        await UnitOfWork.ReloadAsync(Resource, true);
        Items = Resource.Secrets.ToArray();
    }
}
