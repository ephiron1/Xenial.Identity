@inject UnitOfWork UOW
@inject ISnackbar Snackbar
@page "/Admin2/Theme"

<MudText Typo="Typo.h3" GutterBottom>Themes</MudText>

<MudStack Row="false">

    <MudText Typo="Typo.caption" GutterBottom>Logo</MudText>

    <div style="max-height: 100px; display: grid;">
        <MudImage Fluid="true" Src="@imgUrl" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudText Color="Color.Error" Typo="Typo.caption">ERROR: @errorMessage</MudText>
    }
    <InputFile id="logoInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png, .svg" />

    <MudButton HtmlTag="label"
               Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Filled.CloudUpload"
               for="logoInput">
        Upload Logo
    </MudButton>
    <MudButton Variant="Variant.Filled"
               Color="Color.Error"
               StartIcon="@Icons.Filled.Delete"
               OnClick="DeleteLogo">Delete Logo</MudButton>

    <MudDivider />

    <MudTextField @bind-Value="@customStyleSheet"
                  Lines="30"
                  Label="Custom-CSS"
                  Variant="Variant.Outlined" />

    <MudButton Variant="Variant.Filled"
               Color="Color.Success"
               OnClick="SaveChanges">Save</MudButton>
</MudStack>

@code {
    private Random rng = new Random();
    private int imageRand = 0;
    private string imgUrl => $"./themes/logo?{imageRand}";
    private string errorMessage = "";
    private string customStyleSheet;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var theme = UOW.FindObject<XpoThemeSettings>(null);
        customStyleSheet = theme.CustomCss;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = "";
            var theme = UOW.FindObject<XpoThemeSettings>(null);
            theme.CustomLogoMimeType = e.File.ContentType;
            using var reader = e.File.OpenReadStream();
            using var ms = new MemoryStream();
            await reader.CopyToAsync(ms);
            theme.CustomLogo = ms.ToArray();
            await UOW.CommitChangesAsync();
            StateHasChanged();
            Snackbar.Add("Changes saved successfully", Severity.Success);
            UpdateImage();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void UpdateImage()
        => imageRand = rng.Next();

    private async Task DeleteLogo()
    {
        errorMessage = "";
        var theme = UOW.FindObject<XpoThemeSettings>(null);
        theme.CustomLogoMimeType = "";
        theme.CustomLogo = Array.Empty<byte>();
        await UOW.CommitChangesAsync();
        StateHasChanged();
        Snackbar.Add("Changes saved successfully", Severity.Success);
        UpdateImage();
    }

    private void SaveChanges()
    {
        var theme = UOW.FindObject<XpoThemeSettings>(null);
        theme.CustomCss = customStyleSheet;
        UOW.CommitChanges();
        Snackbar.Add("Changes saved successfully", Severity.Success);
    }
}
