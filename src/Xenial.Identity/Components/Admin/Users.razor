@page "/Admin2/Users"
@using DevExpress.Data.Filtering
@using Microsoft.AspNetCore.Identity
@using MudBlazor.Utilities
@using Xenial.Identity.Areas.Identity.Pages.Account.Manage
@using Xenial.Identity.Data
@inject UserManager<XenialIdentityUser> UserManager
@inject IJsApiService JsApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h3" GutterBottom>Users</MudText>

<MudPaper Elevation="10" Class="mb-1" Square>
    <MudToolBar Dense>
        @if (total.HasValue)
        {
            <MudText Class="mr-2"
                 Typo="Typo.caption">Total: @total.Value</MudText>
        }
        <MudTextField Immediate
                      Clearable
                      DebounceInterval="200"
                      Value="@search"
                      ValueChanged="@(async (string s) => await SearchChanged(s))"
                      Label="Search"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      Margin="Margin.Dense"
                      IconSize="Size.Small"
                      AdornmentIcon="@Icons.Filled.Search"
                      AdornmentColor="Color.Secondary"
                      Style="width: 200px" />

        <MudSpacer />
        <MudTooltip Text="Add">
            <MudIconButton Icon="@Icons.Filled.Add"
                           OnClick="@table.ReloadServerData"
                           Color="Color.Success" />
        </MudTooltip>
        <MudTooltip Text="Refresh">
            <MudIconButton Icon="@Icons.Filled.Refresh"
                           OnClick="@table.ReloadServerData"
                           Color="Color.Primary" />
        </MudTooltip>
    </MudToolBar>
</MudPaper>
<MudTable @ref="table"
          T="XenialIdentityUser"
          Dense
          FixedHeader
          Elevation="10"
          ServerData="@(new Func<TableState, Task<TableData<XenialIdentityUser>>>(ServerReload))"
          Virtualize="true"
          Height="calc(100vh - 21em)"
          Class="mb-0"
          Loading="IsLoading"
          RowClassFunc="SelectedRowClassFunc"
          OnRowClick="RowClickEvent">
    <HeaderContent>
        <MudTh Style="width:0.1%; white-space: nowrap;">
            <MudTableSortLabel T="XenialIdentityUser"
                               SortLabel="@(nameof(XenialIdentityUser.Id))">Id</MudTableSortLabel>
        </MudTh>
        <MudTh Style="width:0.1%; white-space: nowrap;">Icon</MudTh>
        <MudTh>
            <MudTableSortLabel T="XenialIdentityUser"
                               SortLabel="@(nameof(XenialIdentityUser.UserName))">Username</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="XenialIdentityUser"
                               SortLabel="@(nameof(XenialIdentityUser.FirstName))">Firstname</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="XenialIdentityUser"
                               SortLabel="@(nameof(XenialIdentityUser.LastName))">Lastname</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="XenialIdentityUser"
                               SortLabel="@(nameof(XenialIdentityUser.Email))">Email</MudTableSortLabel>
        </MudTh>
        <MudTh Style="width:0.1%; white-space: nowrap;">

        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@(nameof(XenialIdentityUser.Id))">
            <MudTooltip Text="@context.Id">
                <MudIconButton Size="Size.Small"
                               DisableElevation
                               Color="Color.Transparent"
                               Variant="Variant.Filled"
                               Icon="@Icons.Filled.Fingerprint"
                               Style="background-color: transparent"
                               OnClick="async () => await CopyToClipboard(context.Id)" />
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="@(nameof(XenialIdentityUser.Picture))"><UserAvatar Size="Size.Small" User="@context" /></MudTd>
        <MudTd DataLabel="@(nameof(context.UserName))">
            <MudHighlighter Text="@context.UserName" HighlightedText="@search" />
        </MudTd>
        <MudTd DataLabel="@(nameof(context.FirstName))">
            <MudHighlighter Text="@context.FirstName" HighlightedText="@search" />
        </MudTd>
        <MudTd DataLabel="@(nameof(context.LastName))">
            <MudHighlighter Text="@context.LastName" HighlightedText="@search" />
        </MudTd>
        <MudTd DataLabel="@(nameof(context.Email))">
            <MudHighlighter Text="@context.Email" HighlightedText="@search" />
        </MudTd>
        <MudTd>
            <MudStack Row>
                <MudTooltip Text="Delete">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Variant="Variant.Filled"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="async () => await DeleteUser(context)" />
                </MudTooltip>
                <MudTooltip Text="Edit">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Href="@($"/Admin2/User/{context.Id}")" />
                </MudTooltip>
            </MudStack>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <NoRecordsContent>
        @if (total > 0)
        {
            <ul>
                <li>There are no users found matching '@search'</li>
                <li><MudButton Size="Size.Small" Color="Color.Primary" OnClick="async () => await SearchChanged(string.Empty)">Clear Filter</MudButton></li>
            </ul>
        }
        else
        {
            <ul>
                <li>There are no users yet.</li>
                <li>Do you want to <MudLink Class="cursor-pointer" onclick="">Add a User</MudLink></li>
            </ul>
        }
    </NoRecordsContent>
</MudTable>

@if (HighlightedValue is not null)
{
    <MudDrawer @bind-Open="@openDrawer" Width="400px" Height="100%" Anchor="@Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudStack Row Style="width: 100%; align-items: center; justify-content: center;">
                <UserAvatar User="@HighlightedValue" />
                <MudText Typo="Typo.h6">@HighlightedValue.DisplayName</MudText>
                <MudSpacer />
                <MudIcon Icon="@Icons.Filled.Close"
                     Class="cursor-pointer"
                     onclick="@CloseDrawer" />
            </MudStack>
        </MudDrawerHeader>
        <MudStack Class="px-2">
            <MudStack Row>
                <MudSpacer />
                <MudTooltip Text="Delete">
                    <MudButton EndIcon="@Icons.Material.Filled.Delete"
                           Variant="Variant.Filled"
                           Color="Color.Error"
                           Size="Size.Small"
                           OnClick="async () => await DeleteUser(HighlightedValue)">Delete</MudButton>
                </MudTooltip>
                <MudTooltip Text="Edit">
                    <MudButton EndIcon="@Icons.Material.Filled.Edit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           Href="@($"/Admin2/User/{HighlightedValue.Id}")">Edit</MudButton>
                </MudTooltip>
            </MudStack>
            <MudField Label="Username"
                  Variant="Variant.Text">@HighlightedValue.UserName</MudField>
            <MudField Label="Firstname"
                  Variant="Variant.Text">@HighlightedValue.FirstName</MudField>
            <MudField Label="Lastname"
                  Variant="Variant.Text">@HighlightedValue.LastName</MudField>
            <MudField Label="Email"
                  Variant="Variant.Text">@HighlightedValue.Email</MudField>
            <MudField Label="PhoneNumber"
                  Variant="Variant.Text">@HighlightedValue.PhoneNumber</MudField>
            <MudText Typo="Typo.caption">Roles</MudText>
            <UserRolesChips User="@HighlightedValue" />
            <MudText Typo="Typo.caption">Claims</MudText>
            <UserClaimsSmall User="@HighlightedValue" />
        </MudStack>
    </MudDrawer>
}
@code {


    bool openDrawer;
    private XenialIdentityUser HighlightedValue;

    private void CloseDrawer()
        => openDrawer = false;

    private string SelectedRowClassFunc(XenialIdentityUser element, int rowNumber)
        => new CssBuilder("cursor-pointer")
            .AddClass("mud-selected-item mud-primary-hover", EqualityComparer<XenialIdentityUser>.Default.Equals(HighlightedValue, element))
            .Build();

    private void RowClickEvent(TableRowClickEventArgs<XenialIdentityUser> e)
    {
        HighlightedValue = e.Item;
        if (HighlightedValue is null)
        {
            openDrawer = false;
        }
        else
        {
            if (HighlightedValue != e.Item)
            {
                openDrawer = true;
            }
            else
            {
                openDrawer = !openDrawer;
            }
        }
    }

    private string search;
    private int? total;
    private MudTable<XenialIdentityUser> table;
    private bool IsLoading = true;

    private async Task SearchChanged(string search)
    {
        this.search = search;
        await table.ReloadServerData();
    }

    private async Task CopyToClipboard(string content)
    {
        await JsApiService.CopyToClipboardAsync(content);
        Snackbar.Add($"Copied {content} to clipboard!", Severity.Info);
    }

    private async Task<TableData<XenialIdentityUser>> ServerReload(TableState state)
    {
        try
        {
            total = await UserManager.Users.CountAsync();
            var items = UserManager.Users;

            if (!string.IsNullOrEmpty(search))
            {
                var s = search.ToLowerInvariant();
                items = items.Where(i =>
                    i.Id.ToLower() == s
                    || i.FirstName.ToLower().Contains(s)
                    || i.LastName.ToLower().Contains(s)
                    || i.Email.ToLower().Contains(s)
                    || i.LastName.ToLower().Contains(s)
                );
            }

            if (!string.IsNullOrEmpty(state.SortLabel))
            {
                items = state.SortLabel switch
                {
                    nameof(XenialIdentityUser.Id) => items.OrderByDirection(state.SortDirection, x => x.Id),
                    nameof(XenialIdentityUser.UserName) => items.OrderByDirection(state.SortDirection, x => x.UserName),
                    nameof(XenialIdentityUser.FirstName) => items.OrderByDirection(state.SortDirection, x => x.FirstName),
                    nameof(XenialIdentityUser.LastName) => items.OrderByDirection(state.SortDirection, x => x.LastName),
                    nameof(XenialIdentityUser.Email) => items.OrderByDirection(state.SortDirection, x => x.Email),
                    _ => items
                };
            }

            var result = await items.Skip(state.Page * state.PageSize)
                .Take(state.PageSize)
                .ToArrayAsync();

            return new TableData<XenialIdentityUser>()
                {
                    Items = result,
                    TotalItems = total.Value
                };
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}
