@using Xenial.Identity.Xpo.Storage.Models

<MudDialog>
    <TitleContent>
        @if (IsNewScope)
        {
            <text>Add Scope</text>
        }
        else
        {
            <text>Edit Scope</text>
        }
    </TitleContent>
    <DialogContent>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudStack Spacing="4">
                <MudStack Row>
                    <MudText Typo="Typo.body1" GutterBottom="false" Class="align-self-end" Style="margin-bottom: .3rem">@Prefix:</MudText>
                    <MudTextField Label="Name"
                                  Variant="Variant.Filled"
                                  FullWidth
                                  Margin="Margin.Dense"
                                  @bind-Value="@Name" />
                </MudStack>
                <MudTextField Label="Displayname"
                              Variant="Variant.Filled"
                              FullWidth
                              Margin="Margin.Dense"
                              @bind-Value="@Scope.DisplayName" />
                <MudTextField Label="Description"
                              Variant="Variant.Filled"
                              FullWidth
                              Margin="Margin.Dense"
                              @bind-Value="@Scope.Description" />
                <MudStack Row Class="justify-space-between">
                    <MudSwitch @bind-Checked="@Scope.Enabled" Label="Enabled" Color="Color.Secondary" />
                    <MudSwitch @bind-Checked="@Scope.Required" Label="Required" Color="Color.Secondary" />
                </MudStack>
                <MudStack Row Class="justify-space-between">
                    <MudSwitch @bind-Checked="@Scope.ShowInDiscoveryDocument" Label="Show in Discovery Document" Color="Color.Secondary" />
                    <MudSwitch @bind-Checked="@Scope.Emphasize" Label="Emphasize" Color="Color.Secondary" />
                </MudStack>
                <MudStack>
                    <MudText Typo="Typo.caption">Identity-Resources</MudText>
                    <MudStack Row>
                        @foreach (var parentIdentityResource in ParentIdentityResources)
                        {
                            <MudChip Size="Size.Small" Class="flex-grow-0">@parentIdentityResource</MudChip>
                        }
                    </MudStack>
                    <TagStringEdit @bind-Tags="@IdentityResources" SearchFunc="@SearchUserResources" />
                </MudStack>
            </MudStack>
        </MudFocusTrap>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private IList<string> IdentityResources { get; set; } = new List<string>();
    private bool IsNewScope;

    public string Name { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var prefix = $"{Prefix}:";
        if (Scope.Name?.StartsWith(prefix) ?? false)
        {
            Name = Scope.Name?.Substring(prefix.Length);
        }
        else
        {
            Name = Scope.Name;
        }
        IsNewScope = UnitOfWork.IsNewObject(Scope);
        IdentityResources = Scope.UserClaims.Select(m => m.Type).Except(ParentIdentityResources).ToList();
    }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UnitOfWork UnitOfWork { get; set; }

    [Parameter]
    public XpoApiScope Scope { get; set; }

    [Parameter]
    public string Prefix { get; set; }

    [Parameter]
    public IEnumerable<string> ParentIdentityResources { get; set; } = Enumerable.Empty<string>();

    public void Cancel() =>
        MudDialog.Cancel();

    public void Save()
    {
        Scope.Name = $"{Prefix}:{Name}";
        foreach (var claim in Scope.UserClaims.ToList())
        {
            UnitOfWork.Delete(claim);
        }
        foreach (var claim in IdentityResources.Concat(ParentIdentityResources))
        {
            Scope.UserClaims.Add(new XpoApiScopeClaim(UnitOfWork)
                {
                    Type = claim
                });
        }
        MudDialog.Close(true);
    }

    private async Task<IEnumerable<string>> SearchUserResources(string x)
    {
        var resources = await UnitOfWork.Query<XpoIdentityResource>().Select(r => r.Name).ToArrayAsync();

        if (string.IsNullOrEmpty(x))
        {
            return resources.Except(IdentityResources).Except(ParentIdentityResources);
        }

        return resources.Except(IdentityResources).Except(ParentIdentityResources).Where(v => v.Contains(x, StringComparison.InvariantCultureIgnoreCase));
    }
}
