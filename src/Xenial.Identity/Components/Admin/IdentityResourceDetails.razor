@page "/Admin2/IdentityResource/{ResourceId:int}"
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using MudBlazor.Utilities
@using Newtonsoft.Json
@using Xenial.AspNetIdentity.Xpo.Models
@using Xenial.Identity.Configuration
@using Xenial.Identity.Data
@using Xenial.Identity.Infrastructure
@using Xenial.Identity.Xpo.Storage.Models
@inject UnitOfWork UnitOfWork
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudStack Row Spacing="2">
    <MudFab Icon="@Icons.Filled.ArrowBack" Size="@Size.Large" Color="Color.Surface" Href="/Admin2/IdentityResources" />
    <MudText Typo="Typo.h3" GutterBottom>IdentityResource</MudText>
</MudStack>

@if (IdentityResource is not null)
{
    <div class="small-tabs">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudStack>
                <MudPaper Class="pa-4">
                    <MudStack Row="true">
                        <MudAvatar Color="Color.Secondary" Variant="Variant.Outlined" Size="Size.Large">
                            <MudIcon Icon="@Icons.Filled.Groups" />
                        </MudAvatar>
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudText Typo="Typo.body1">@IdentityResource.Name</MudText>
                            <MudText Typo="Typo.body2">@IdentityResource.DisplayName</MudText>
                            <MudText Typo="Typo.body2">@IdentityResource.Description</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>

                <MudTabs ApplyEffectsToContainer="true"
                     Centered
                     Elevation="4"
                     Rounded="true"
                     PanelClass="pa-6"
                     ActivePanelIndex="@ActivePanelIndex"
                     ActivePanelIndexChanged="@(i => SetActivePanelIndex(i))">
                    <MudTabPanel ToolTip="Name" Icon="@Icons.Filled.Person">
                        <MudStack Spacing="4">
                            <MudTextField Label="Name"
                                      Variant="Variant.Filled"
                                      FullWidth
                                      Margin="Margin.Dense"
                                      @bind-Value="@IdentityResource.Name" />
                            <MudTextField Label="Displayname"
                                      Variant="Variant.Filled"
                                      FullWidth
                                      Margin="Margin.Dense"
                                      @bind-Value="@IdentityResource.DisplayName" />
                            <MudTextField Label="Description"
                                      Variant="Variant.Filled"
                                      FullWidth
                                      Margin="Margin.Dense"
                                      @bind-Value="@IdentityResource.Description" />
                            <MudStack Row Class="justify-space-between">
                                <MudSwitch @bind-Checked="@IdentityResource.Enabled" Label="Enabled" Color="Color.Secondary" />
                                <MudSwitch @bind-Checked="@IdentityResource.Required" Label="Required" Color="Color.Secondary" />
                            </MudStack>
                            <MudStack Row Class="justify-space-between">
                                <MudSwitch @bind-Checked="@IdentityResource.ShowInDiscoveryDocument" Label="Show in Discovery Document" Color="Color.Secondary" />
                                <MudSwitch @bind-Checked="@IdentityResource.NonEditable" Label="Non Editable" Color="Color.Secondary" />
                            </MudStack>
                            <MudStack Row Class="justify-space-between">
                                <MudSwitch @bind-Checked="@IdentityResource.Emphasize" Label="Emphasize" Color="Color.Secondary" />
                            </MudStack>
                            <MudText Typo="Typo.caption">Identity-Resources</MudText>
                            <TagStringEdit @bind-Tags="@UserClaims" SearchFunc="@SearchClaims" />
                        </MudStack>
                    </MudTabPanel>
                    <MudTabPanel ToolTip="Claims" Icon="@Icons.Filled.Class">
                        @*<IdentityResourceClaimsSmall IdentityResource="@IdentityResource" AllowEdit />*@
                    </MudTabPanel>
                </MudTabs>

                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => await Save()">Save</MudButton>

            </MudStack>
        </MudContainer>
    </div>

}
@code {
    [Parameter]
    public int ResourceId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(ActivePanelIndex))]
    public int ActivePanelIndex { get; set; } = 0;

    private void SetActivePanelIndex(int activePanelIndex)
    {
        ActivePanelIndex = activePanelIndex;
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameter(nameof(ActivePanelIndex), activePanelIndex)
        );
    }

    public XpoIdentityResource IdentityResource { get; set; }

    public IList<string> UserClaims { get; set; } = Array.Empty<string>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await Refresh();
    }

    protected async Task Refresh()
    {
        IdentityResource = await UnitOfWork.GetObjectByKeyAsync<XpoIdentityResource>(ResourceId);
        UserClaims = IdentityResource.UserClaims.Select(x => x.Type).ToList();
    }

    private async Task<IEnumerable<string>> SearchClaims(string x)
    {
        var items = await UnitOfWork.Query<XpoIdentityResource>().Select(x => new
        {
            Root = x.Name,
            Nested = x.UserClaims.Select(m => m.Type).ToArray()
        }).ToListAsync();

        var userClaims = await UnitOfWork.Query<XpoIdentityUserClaim>()
            .Select(x => x.Type)
            .Distinct()
            .ToArrayAsync();

        var roleClaims = await UnitOfWork.Query<XpoIdentityRoleClaim>()
          .Select(x => x.Type)
          .Distinct()
          .ToArrayAsync();

        var all = items
            .Select(m => m.Root)
            .Concat(items.SelectMany(m => m.Nested))
            .Concat(ClientConstants.StandardClaims)
            .Concat(userClaims)
            .Concat(roleClaims)
            .Distinct()
            .ToList();

        if (string.IsNullOrEmpty(x))
        {
            return all.Except(UserClaims);
        }

        return all.Except(UserClaims).Where(v => v.Contains(x, StringComparison.InvariantCultureIgnoreCase));

    }
}
