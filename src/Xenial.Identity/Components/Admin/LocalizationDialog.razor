@using Duende.IdentityServer.Models
@using Xenial.Identity.Configuration
@using Xenial.Identity.Xpo.Storage.Models

<MudDialog>
    <TitleContent>
        <text>Localization</text>
    </TitleContent>
    <DialogContent>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudStack Spacing="4">
                @if (AllowEditKey)
                {
                    <MudAutocomplete T="string"
                                 Label="Key"
                                 Variant="Variant.Filled"
                                 FullWidth
                                 Margin="Margin.Dense"
                                 @bind-Value="@Localization.Key"
                                 CoerceValue
                                 SearchFunc="@(async s => await SearchFunc(s))" />
                }
                else
                {
                    <MudField Label="Key"
                          Variant="Variant.Filled"
                          FullWidth
                          Margin="Margin.Dense">@Localization.Key</MudField>
                }

                <MudTextField Label="Value"
                              Variant="Variant.Filled"
                              FullWidth
                              Margin="Margin.Dense"
                              @bind-Value="@Localization.Value" />
            </MudStack>
        </MudFocusTrap>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UnitOfWork UnitOfWork { get; set; }

    [Parameter]
    public XpoLocalization Localization { get; set; }

    [Parameter]
    public bool AllowEditKey { get; set; } = true;

    [Parameter]
    public Func<string, Task<bool>> Validate { get; set; } = _ => Task.FromResult(true);

    [Parameter]
    public Func<string, Task<IEnumerable<string>>> SearchFunc { get; set; } = _ => Task.FromResult(Enumerable.Empty<string>());

    public void Cancel()
        => MudDialog.Cancel();

    public async Task Save()
    {
        if (await Validate(Localization.Key))
        {
            MudDialog.Close(true);
        }
    }
}
